<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="adminMapper">


 <resultMap type="Admin" id="admin_rm">
        <!-- DB에서 PK에 해당하는 필드, 컬럼을 작성하는 태그 -->
     <id property = "memberNo" column="MEMBER_NO"/>
     <!-- 나머지 일반 컬럼 -->
      <result property="memberId" column="MEMBER_ID" />
      <result property="memberPw" column="MEMBER_PW" />
      <result property="memberName" column="MEMBER_NAME" />
      <result property="memberNickname" column="MEMBER_NICKNAME" />
      <result property="to" column="MEMBER_TEL" />
      <result property="signUpDate" column="SIGNUP_DATE" />
      <result property="memberDelFl" column="MEMBER_DEL_FL" />
      <result property="memberBirth" column="MEMBER_BIRTH" />
      <result property="authority" column="AUTHORITY" />
      <result property="profileImg" column="PROFILE_IMG" />
      <result property="mypageImg" column="MYPAGE_IMG" />
      <result property="memberAddress" column="MEMBER_ADDRESS" />
      <result property="farmImg" column="FARM_IMG" />
      <result property="authDate" column="AUTH_DATE" />
      <result property="postCount" column="POST_COUNT" />
      <result property="boardCount" column="BOARD_COUNT" />
      <result property="commentCount" column="COMMENT_COUNT" />
      <result property="orderCount" column="ORDER_COUNT" />
      
      <result property="memberAddress" column="MEMBER_ADDRESS" />
      <result property="defaultFl" column="DEFAULT_FL" />

     	 <result property="reportNo" column="REPORT_NO" />
	     <result property="reportType" column="REPORT_TYPE" />
	     <result property="reportMemberNo" column="REPORT_MEMBER_NO" />
	     <result property="reportTargetNo" column="REPORT_TARGET_NO" />
	     <result property="reportReason" column="REPORT_REASON" />
	     <result property="reportDate" column="REPORT_DATE" />
	     <result property="reportPenalty" column="REPORT_PENALTY" />
	     <result property="processDate" column="PROCESS_DATE" />
	     <result property="reportContent" column="REPORT_CONTENT" />
	     <result property="title" column="TITLE" />
	     <result property="content" column="CONTENT" />
	     <result property="reportVolume" column="REPORT_VOLUME" />
	     
	     <result property ="boardNo" column="BOARD_NO"/>
       <result property="boardTitle" column="BOARD_TITLE" />
       <result property="boardContent" column="BOARD_CONTENT" />
       <result property="boardDelFlag" column="BOARD_DEL_FL" />
       
       <result property= "postNo" column="POST_NO"/>
	     <result property="postTitle" column="POST_TITLE" />
	     <result property="postContent" column="POST_CONTENT" />
	     <result property="postDelFl" column="POST_DEL_FL" />
	     
  </resultMap>
  
  


	<!-- 관리자인지 확인 -->
	<select id="checkAdmin" resultType="_int">
		SELECT COUNT(*)
		FROM "MEMBER" 
		WHERE AUTHORITY = 2
	</select>
	
	
	<!-- 판매자 인증중인 회원인지 확인 -->
	<select id="checkAuth" resultType="_int">
		SELECT COUNT(*)
		FROM "MEMBER"
		WHERE AUTHORITY = 3
		AND MEMBER_NO = #{memberNo}
	</select>
	


	<!-- 대시보드 -->
	<!-- 신규 주문 통계 -->
	<select id="newOrderStat" resultType="_int">
		SELECT COUNT(*)
		FROM "ORDER" 
		WHERE ORDER_STATUS = 0
	</select>

	<!-- 미처리 신고 -->
	<select id="askReportStat" resultType="_int">
		SELECT COUNT(*)
		FROM REPORT 
		WHERE PROCESS_DATE IS NULL
	</select>
	
	<!-- 판매자 인증 접수 -->
	<select id="authSellerStat" resultType="_int">
		SELECT COUNT(*)
		FROM "MEMBER" 
		WHERE AUTHORITY = 3
	</select>


	<!-- 전체 회원 수 (정렬 별로 포함)-->
	<select id="memberListCount" resultType="_int">
		SELECT COUNT(*)
		FROM (
			SELECT MEMBER_NO, MEMBER_ID, MEMBER_NAME, MEMBER_NICKNAME, MEMBER_TEL, MEMBER_DEL_FL, SIGNUP_DATE, AUTHORITY, PROFILE_IMG, MEMBER_BIRTH,
					MEMBER_ADDRESS, DEFAULT_FL, FARM_IMG, REPORT_NO, REPORT_TYPE, REPORT_MEMBER_NO, REPORT_TARGET_NO, REPORT_REASON, REPORT_DATE, REPORT_PENALTY, 
					PROCESS_DATE, REPORT_CONTENT, RANK() OVER(PARTITION BY REPORT_TARGET_NO, REPORT_TYPE ORDER BY REPORT_NO DESC) AS RANKING
			FROM MEMBER 
			LEFT JOIN ADDRESS USING(MEMBER_NO)
			LEFT JOIN SELLER USING(MEMBER_NO)
			LEFT JOIN REPORT ON (MEMBER_NO = REPORT_TARGET_NO)
			WHERE MEMBER_ID != 'admin'
			ORDER BY MEMBER_NO)
			WHERE RANKING = 1
			<if test='authFilter==0 and statFilter==0'> <!--전체 -->
			</if>
			<if test='authFilter==1'> <!--판매자인증: 미등록 -->
				AND AUTHORITY = 0
			</if>		
			<if test='authFilter==2'> <!--판매자인증: 판매자 -->
				AND AUTHORITY = 1
			</if>
			<if test='authFilter==3'> <!--판매자인증: 인증대기 -->
				AND AUTHORITY = 3
			</if>
			
			<if test='statFilter==1'> <!--상태: 활동중 -->
				AND MEMBER_DEL_FL = 'N'
				AND REPORT_PENALTY IS NULL
			</if>
			<if test='statFilter==2'> <!--상태: 신고접수 -->
				AND MEMBER_DEL_FL = 'N'
				AND REPORT_PENALTY = 'N' 
				AND REPORT_TYPE IS NOT NULL
			</if>
			<if test='statFilter==3'> <!--상태: 정지 -->
				AND MEMBER_DEL_FL = 'N'
				AND REPORT_PENALTY = 'Y' 
				AND PROCESS_DATE IS NOT NULL
			</if>
			<if test='statFilter==4'> <!--상태: 강제 탈퇴 -->
				AND MEMBER_DEL_FL = 'Y'
			</if>
			<if test='keyword != null'>
				AND (MEMBER_ID LIKE('%${keyword}%') OR MEMBER_ID LIKE LOWER('%${keyword}%') OR MEMBER_ID LIKE UPPER('%${keyword}%')
				OR 	MEMBER_NICKNAME LIKE ('%${keyword}%') OR MEMBER_NICKNAME LIKE LOWER('%${keyword}%') OR MEMBER_NICKNAME LIKE ('%${keyword}%'))
			</if>
	</select>

	
	<!-- 전체 회원 정보 조회 (정렬 별로 포함) -->
	<select id="selectMemberList" resultMap="admin_rm">
		SELECT *
		FROM (
			SELECT MEMBER_NO, MEMBER_ID, MEMBER_NAME, MEMBER_NICKNAME, MEMBER_TEL, MEMBER_DEL_FL, SIGNUP_DATE, AUTHORITY, PROFILE_IMG, MEMBER_BIRTH,
					REPLACE(MEMBER_ADDRESS, ',,', ' ') MEMBER_ADDRESS, DEFAULT_FL, FARM_IMG, REPORT_NO, REPORT_TYPE, REPORT_MEMBER_NO, REPORT_TARGET_NO, REPORT_REASON, REPORT_DATE, REPORT_PENALTY, 
					PROCESS_DATE, REPORT_CONTENT, RANK() OVER(PARTITION BY REPORT_TARGET_NO, REPORT_TYPE ORDER BY REPORT_NO DESC) AS RANKING
			FROM MEMBER 
			LEFT JOIN ADDRESS USING(MEMBER_NO)
			LEFT JOIN SELLER USING(MEMBER_NO)
			LEFT JOIN REPORT ON (MEMBER_NO = REPORT_TARGET_NO)
			WHERE MEMBER_ID != 'admin'
			ORDER BY MEMBER_NO)
			WHERE RANKING = 1
			<if test='authFilter==0 and statFilter==0'> <!--전체 -->
			</if>
			<if test='authFilter==1'> <!--판매자인증: 미등록 -->
				AND AUTHORITY = 0
			</if>		
			<if test='authFilter==2'> <!--판매자인증: 판매자 -->
				AND AUTHORITY = 1
			</if>
			<if test='authFilter==3'> <!--판매자인증: 인증대기 -->
				AND AUTHORITY = 3
			</if>
			
			<if test='statFilter==1'> <!--상태: 활동중 -->
				AND MEMBER_DEL_FL = 'N'
				AND REPORT_PENALTY IS NULL
			</if>
			<if test='statFilter==2'> <!--상태: 신고접수 -->
				AND MEMBER_DEL_FL = 'N'
				AND REPORT_PENALTY = 'N' 
				AND REPORT_TYPE IS NOT NULL
			</if>
			<if test='statFilter==3'> <!--상태: 정지 -->
				AND MEMBER_DEL_FL = 'N'
				AND REPORT_PENALTY = 'Y' 
				AND PROCESS_DATE IS NOT NULL
			</if>
			<if test='statFilter==4'> <!--상태: 강제 탈퇴 -->
				AND MEMBER_DEL_FL = 'Y'
			</if>
			<if test='keyword != null'>
				AND (MEMBER_ID LIKE('%${keyword}%') OR MEMBER_ID LIKE LOWER('%${keyword}%') OR MEMBER_ID LIKE UPPER('%${keyword}%')
				OR 	MEMBER_NICKNAME LIKE ('%${keyword}%') OR MEMBER_NICKNAME LIKE LOWER('%${keyword}%') OR MEMBER_NICKNAME LIKE ('%${keyword}%'))
			</if>
	</select>
	
	
	<!-- 회원 상세 조회 (회원 정보)  -->
	<select id="selectMemberDetail" resultMap="admin_rm">
			SELECT *
			FROM (
				SELECT MEMBER_NO, MEMBER_ID, MEMBER_NAME, MEMBER_NICKNAME, MEMBER_TEL, MEMBER_DEL_FL, SIGNUP_DATE, AUTHORITY, PROFILE_IMG, MEMBER_BIRTH,
						REPLACE(MEMBER_ADDRESS, ',,', ' ') MEMBER_ADDRESS, DEFAULT_FL, FARM_IMG, REPORT_NO, REPORT_TYPE, REPORT_MEMBER_NO, REPORT_TARGET_NO, REPORT_REASON, REPORT_DATE, REPORT_PENALTY, 
						RANK() OVER(PARTITION BY REPORT_TARGET_NO ORDER BY REPORT_NO DESC) AS RANKING
				FROM MEMBER 
				LEFT JOIN ADDRESS USING(MEMBER_NO)
				LEFT JOIN SELLER USING(MEMBER_NO)
				LEFT JOIN REPORT ON (MEMBER_NO = REPORT_TARGET_NO)
				WHERE MEMBER_ID != 'admin'
				ORDER BY MEMBER_NO)
			WHERE RANKING = 1
			AND MEMBER_NO = #{hiddenNo}
	</select>
	
	
	<!-- 회원 상세 조회 (계정 상태 변경 내역) -->
		<select id="selectMemberHistory" resultMap="admin_rm">
			SELECT *
			FROM (
				SELECT MEMBER_NO, MEMBER_ID, MEMBER_DEL_FL, SIGNUP_DATE, AUTHORITY, 
						 REPORT_NO, REPORT_TYPE, REPORT_MEMBER_NO, REPORT_TARGET_NO, REPORT_REASON, REPORT_DATE, REPORT_PENALTY, 
						PROCESS_DATE, REPORT_CONTENT, RANK() OVER(PARTITION BY REPORT_TARGET_NO, REPORT_TYPE ORDER BY REPORT_NO DESC) AS RANKING
				FROM MEMBER 
				LEFT JOIN ADDRESS USING(MEMBER_NO)
				LEFT JOIN SELLER USING(MEMBER_NO)
				LEFT JOIN REPORT ON (MEMBER_NO = REPORT_TARGET_NO)
				WHERE MEMBER_ID != 'admin'
				ORDER BY MEMBER_NO)
			WHERE MEMBER_NO = #{hiddenNo}
	</select>
	
	

	<!-- 판매자, 인증대기 수 -->
	<select id="sellerListCount" resultType="_int">
		SELECT COUNT(*)
		FROM "MEMBER" 
		LEFT JOIN ADDRESS USING(MEMBER_NO)
		LEFT JOIN "SELLER" USING(MEMBER_NO)
		<if test='sellerFilter == 0'>
			WHERE AUTHORITY = 3
		</if>
		<if test='sellerFilter == 1'>
			WHERE (AUTHORITY = 1 OR AUTHORITY = 3)
		</if>
	</select>


	<!-- 판매자+인증대기 조회 -->
	<select id="selectSeller" resultMap="admin_rm">
		SELECT MEMBER_NO, MEMBER_ID, MEMBER_NAME, MEMBER_NICKNAME, MEMBER_TEL, MEMBER_BIRTH,
				REPLACE(MEMBER_ADDRESS, ',,', ' ') MEMBER_ADDRESS, MEMBER_DEL_FL, SIGNUP_DATE, AUTHORITY, FARM_IMG, AUTH_DATE
		FROM "MEMBER" 
		LEFT JOIN ADDRESS USING(MEMBER_NO)
		LEFT JOIN "SELLER" USING(MEMBER_NO)
		<if test='sellerFilter == 0'>
			WHERE AUTHORITY = 3
		</if>
		<if test='sellerFilter == 1'>
			WHERE (AUTHORITY = 1 OR AUTHORITY = 3)
		</if>
	</select>
	
	
	<!-- 판매자 인증신청서 조회 -->
	<select id="selectAuthPaper" resultMap="admin_rm">
		SELECT MEMBER_NO, MEMBER_ID, MEMBER_NAME, MEMBER_NICKNAME, MEMBER_TEL, MEMBER_BIRTH, 
		REPLACE(MEMBER_ADDRESS, ',,', ' ') MEMBER_ADDRESS, MEMBER_DEL_FL, SIGNUP_DATE, AUTHORITY, FARM_IMG, AUTH_DATE
		FROM "MEMBER" 
		LEFT JOIN ADDRESS USING(MEMBER_NO)
		LEFT JOIN "SELLER" USING(MEMBER_NO)
		WHERE MEMBER_NO = #{hiddenNo}
	</select>
	
	
	<!-- 판매자 인증 승인 -->
	<update id="sellerApprove">
		UPDATE MEMBER SET
		AUTHORITY = 1
		WHERE MEMBER_NO = #{hiddenNo}
	</update>

	<!-- 판매자 인증 처리 시 처리 날짜 추가 -->
	<update id="updateAuthDate">
		UPDATE "SELLER" SET
		AUTH_DATE = SYSDATE
		WHERE MEMBER_NO = #{hiddenNo}
	</update>


	<!-- 판매자 인증 거절 -->
	
	
	
	
	
	
	<!-- 미처리 신고 개수 -->
	<select id="reportListCount" resultType="_int">
		SELECT COUNT(*)
		FROM (SELECT M.MEMBER_NO, MEMBER_ID, AUTHORITY, MEMBER_DEL_FL, 
				REPORT_NO, REPORT_MEMBER_NO, REPORT_TARGET_NO, REPORT_REASON, REPORT_CONTENT, REPORT_DATE, REPORT_PENALTY, PROCESS_DATE,
				RANK() OVER(PARTITION BY REPORT_TARGET_NO, REPORT_TYPE ORDER BY REPORT_NO DESC) AS RANKING,
				RANK() OVER(PARTITION BY REPORT_TARGET_NO, REPORT_TYPE ORDER BY REPORT_NO) AS REPORT_VOLUME,
				BOARD_NO, BOARD_DEL_FL, POST_NO, POST_DEL_FL, REPORT_TYPE,
				(CASE
					WHEN REPORT_TYPE = 'B' THEN BOARD_TITLE
					WHEN REPORT_TYPE = 'P' THEN POST_TITLE
				END) TITLE,
				(CASE
					WHEN REPORT_TYPE = 'B' THEN BOARD_CONTENT
					WHEN REPORT_TYPE = 'P' THEN POST_CONTENT
				END 
				) CONTENT
				FROM REPORT R
				LEFT JOIN BOARD ON(REPORT_TARGET_NO = BOARD_NO)
				LEFT JOIN MEMBER M ON(REPORT_TARGET_NO = M.MEMBER_NO)
				LEFT JOIN POST ON(REPORT_TARGET_NO = POST_NO))
		WHERE (REPORT_PENALTY = 'N' OR REPORT_PENALTY IS NULL)
		AND RANKING = 1
	</select>
	
	
	
	<!-- 미처리 신고 조회 -->
	<select id="selectNewReport" resultMap="admin_rm">
		SELECT *
		FROM (SELECT M.MEMBER_NO, MEMBER_ID, AUTHORITY, MEMBER_DEL_FL, 
				REPORT_NO, REPORT_MEMBER_NO, REPORT_TARGET_NO, REPORT_REASON, REPORT_CONTENT, REPORT_DATE, REPORT_PENALTY, PROCESS_DATE,
				RANK() OVER(PARTITION BY REPORT_TARGET_NO, REPORT_TYPE ORDER BY REPORT_NO DESC) AS RANKING,
				RANK() OVER(PARTITION BY REPORT_TARGET_NO, REPORT_TYPE ORDER BY REPORT_NO) AS REPORT_VOLUME,
				BOARD_NO, BOARD_DEL_FL, POST_NO, POST_DEL_FL, REPORT_TYPE,
				(CASE
					WHEN REPORT_TYPE = 'B' THEN BOARD_TITLE
					WHEN REPORT_TYPE = 'P' THEN POST_TITLE
				END 
				) TITLE,
				(CASE
					WHEN REPORT_TYPE = 'B' THEN BOARD_CONTENT
					WHEN REPORT_TYPE = 'P' THEN POST_CONTENT
				END 
				) CONTENT
				FROM REPORT R
				LEFT JOIN BOARD ON(REPORT_TARGET_NO = BOARD_NO)
				LEFT JOIN MEMBER M ON(REPORT_TARGET_NO = M.MEMBER_NO)
				LEFT JOIN POST ON(REPORT_TARGET_NO = POST_NO))
		WHERE (REPORT_PENALTY = 'N' OR REPORT_PENALTY IS NULL)
		AND RANKING = 1
		<if test='sortFilter != null and sortFilter != ""'>
			<choose>
				<when test='sortFilter == "up"'>
					ORDER BY REPORT_VOLUME ASC
				</when>
				<when test='sortFilter == "down"'>
					ORDER BY REPORT_VOLUME DESC
				</when>
				<when test='sortFilter == "default"'>
						ORDER BY REPORT_NO
				</when>
			</choose>
		</if>
	</select>



	<!-- 미처리 신고 상세 조회 -->
	<select id="selectNewReportDetail" resultMap="admin_rm">
		SELECT *
		FROM (SELECT M.MEMBER_NO, MEMBER_ID, AUTHORITY, MEMBER_DEL_FL, 
				REPORT_NO, REPORT_MEMBER_NO, REPORT_TARGET_NO, REPORT_REASON, REPORT_CONTENT, REPORT_DATE, REPORT_PENALTY, PROCESS_DATE,
				RANK() OVER(PARTITION BY REPORT_TARGET_NO, REPORT_TYPE ORDER BY REPORT_NO DESC) AS RANKING,
				RANK() OVER(PARTITION BY REPORT_TARGET_NO, REPORT_TYPE ORDER BY REPORT_NO) AS REPORT_VOLUME,
				BOARD_NO, BOARD_DEL_FL, POST_NO, POST_DEL_FL, REPORT_TYPE,
				(CASE
					WHEN REPORT_TYPE = 'B' THEN BOARD_TITLE
					WHEN REPORT_TYPE = 'P' THEN POST_TITLE
				END 
				) TITLE,
				(CASE
					WHEN REPORT_TYPE = 'B' THEN BOARD_CONTENT
					WHEN REPORT_TYPE = 'P' THEN POST_CONTENT
				END 
				) CONTENT
				FROM REPORT R
				LEFT JOIN BOARD ON(REPORT_TARGET_NO = BOARD_NO)
				LEFT JOIN MEMBER M ON(REPORT_TARGET_NO = M.MEMBER_NO)
				LEFT JOIN POST ON(REPORT_TARGET_NO = POST_NO))
		WHERE (REPORT_PENALTY = 'N' OR REPORT_PENALTY IS NULL)
		AND RANKING = 1
		AND REPORT_NO = #{hiddenReportNo}
	</select>





	<!-- 강제 탈퇴 -->	
	<update id="memberKickout">
		UPDATE MEMBER SET
		MEMBER_DEL_FL = 'Y'
		WHERE MEMBER_NO = #{hiddenNo}
	</update>
	
	
	<!-- 계정 : 신고 상태 변경, 신고 처리일자 추가 -->
	<update id = "changeReportStatus">
		UPDATE REPORT SET
		REPORT_PENALTY = 'Y',
		PROCESS_DATE = SYSDATE
		WHERE REPORT_TYPE = 'M'
		AND REPORT_TARGET_NO = #{hiddenNo}
	</update>
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	


</mapper>