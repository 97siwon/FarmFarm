<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="productAdmin">

<!-- 팜팜 상품 resultMap -->
 	<resultMap type="Product" id="product_rm">	
        <!-- DB에서 PK에 해당하는 필드, 컬럼을 작성하는 태그 -->
	     <id property = "productNo" column="PRODUCT_NO"/>
	     <!-- 나머지 일반 컬럼 -->
	      <result property="productName" column="PRODUCT_NAME" />
	      <result property="regDate" column="REG_DATE" />
	      <result property="productPrice" column="PRODUCT_PRICE" />
	      <result property="productAmount" column="PRODUCT_AMOUNT" />
	      <result property="stock" column="STOCK" />
	      <result property="productMessage" column="PRODUCT_MESSAGE" />
	      <result property="categoryNo" column="CATEGORY_NO" />
	      <result property="wishCheck" column="WISH_CHECK" />
	      <result property="soldoutFl" column="SOLDOUT_FL" />
	      <result property="productDelFl" column="PRODUCT_DEL_FL" />
	      <result property="productImgAddress" column="PRODUCT_IMG_ADDRESS" />
	      <result property="productStatus" column="PRODUCT_STATUS" />    
	      <result property="orderSum" column="ORDER_SUM" />    
	      
 	      <collection property="imgList" 
	      			  javaType="java.util.ArrayList" ofType="ProductImg"
	      			  select="selectImgList"
	      			  column = "PRODUCT_NO"/>
	  </resultMap>
  
  
 	<!-- 팜팜 상품 이미지 resultMap --> 
	 <resultMap type="ProductImg" id="productImg_rm">
	        <!-- DB에서 PK에 해당하는 필드, 컬럼을 작성하는 태그 -->
	     <id property = "productImgNo" column="PRODUCT_IMG_NO"/>
	
	     <!-- 나머지 일반 컬럼 -->
	      <result property="productImgAddress" column="PRODUCT_IMG_ADDRESS" />
	      <result property="productNo" column="PRODUCT_NO" />
	      <result property="productImgOrder" column="PRODUCT_IMG_ORDER" />
	      <result property="productImgOriginal" column="PRODUCT_IMG_ORIGINAL" />
	  </resultMap>
	  
	  
	  
	<resultMap type="Order" id="order_rm">
		<!-- DB에서 PK에 해당하는 필드, 컬럼을 작성하는 태그 -->
		<id property = "orderNo" column="ORDER_NO"/>
		<!-- 나머지 일반 컬럼 -->
		<result property="memberNo" column="MEMBER_NO" />
		<result property="memberId" column="MEMBER_ID" />
		<result property="memberName" column="MEMBER_NAME" />
		<result property="memberTel" column="MEMBER_TEL" />
		<result property="orderDate" column="ORDER_DATE" />
		<result property="orderAddress" column="ORDER_ADDRESS" />
		<result property="orderStatus" column="ORDER_STATUS" />
		<result property="invoiceNo" column="INVOICE_NO" />
		<result property="orderPrice" column="ORDER_PRICE" />
		<result property="impUid" column="IMP_UID" />
		<result property="productCount" column="PRODUCT_COUNT" />
		<result property="productSum" column="PRODUCT_SUM" />
		
 		 <collection property="productList" 
		javaType="java.util.ArrayList" ofType="Product"
		select="selectOrderProduct"
		column = "ORDER_NO"/> 
 	</resultMap>
  
	<!-- 반품 resultMap -->
 	<resultMap type="Return" id="return_rm">
        <!-- DB에서 PK에 해당하는 필드, 컬럼을 작성하는 태그 -->
     <id property = "returnNo" column="RETURN_NO"/>
     <!-- 나머지 일반 컬럼 -->
      <result property="orderNo" column="ORDER_NO" />
      <result property="returnStatus" column="RETURN_STATUS" />
      <result property="returnReason" column="RETURN_REASON" />
      <result property="accountName" column="ACCOUNT_NAME" />
      <result property="accountNo" column="ACCOUNT_NO" />    			  
      <result property="returnAmount" column="RETURN_AMOUNT" />    			  
      <result property="returnSum" column="RETURN_SUM" />
      <result property="memberId" column="MEMBER_ID" />
   	  <result property="productNo" column="PRODUCT_NO"/>
      <result property="productName" column="PRODUCT_NAME" />
      <result property="productPrice" column="PRODUCT_PRICE" />
      <result property="productAmount" column="PRODUCT_AMOUNT" />   			  
 	</resultMap>

		
	<!-- 팜팜 상품 등록 -->
	<insert id="enrollProduct" parameterType="Product" useGeneratedKeys="true">
		<selectKey keyProperty="productNo" resultType="_int" order="BEFORE">
			SELECT SEQ_PRODUCT_NO.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO PRODUCT VALUES
		(#{productNo}, #{productName}, DEFAULT, #{productPrice}, 
		DEFAULT, #{categoryNo}, 0, #{productMessage}, DEFAULT)
	</insert>
	
	<!-- 최초 재고 등록 -->
	<insert id="insertStock">
		INSERT INTO STOCK_HISTORY VALUES
		(SEQ_STOCK_NO.NEXTVAL, #{productAmount}, DEFAULT, #{productNo}, 0)
	</insert>
	

	<!-- 팜팜이미지 삽입 -->
	<insert id="insertProductImgList" parameterType="list">
		INSERT INTO PRODUCT_IMG
		SELECT SEQ_PRODUCT_IMG_NO.NEXTVAL PRODUCT_IMG_NO, A.* FROM
		<foreach collection="list" item="img" open="(" close=") A" separator="UNION ALL">
			SELECT
				#{img.productImgAddress} PRODUCT_IMG_ADDRESS,
				#{img.productNo} PRODUCT_NO,
				#{img.productImgOrder} PRODUCT_IMG_ORDER,
				#{img.productImgOriginal} PRODUCT_IMG_ORIGINAL
			FROM DUAL
		</foreach>
	</insert>
	
	<!-- 팜팜글 수 조회 -->
	<select id="getListCount" resultType="_int">
		SELECT COUNT(*)
		FROM PRODUCT
		WHERE PRODUCT_DEL_FL = 'N'
	</select>
	
	<!-- 팜팜상품 리스트 조회 -->
	<select id="selectProductList" resultMap="product_rm">
		SELECT P.PRODUCT_NO, P.PRODUCT_NAME, PRODUCT_IMG_ADDRESS,
			STOCK, SOLDOUT_FL,
			TO_CHAR(REG_DATE, 'YYYY-MM-DD') REG_DATE,
			NVL((SELECT SUM(PRODUCT_AMOUNT) FROM ORDER_PRODUCT OP
			LEFT JOIN "ORDER" O ON O.ORDER_NO = OP.ORDER_NO
			WHERE ORDER_STATUS=0
			AND OP.PRODUCT_NO = P.PRODUCT_NO), 0) ORDER_SUM
		FROM PRODUCT P
		JOIN PRODUCT_IMG PI ON PI.PRODUCT_NO = P.PRODUCT_NO
		WHERE PRODUCT_IMG_ORDER=0
		AND PRODUCT_DEL_FL='N'
		ORDER BY PRODUCT_NO DESC
	</select>
	
	<!-- 검색 조건 일치 상품 수 조회 -->
	<select id="getListCount_search" resultType="_int">
		SELECT COUNT(*)
		FROM PRODUCT
		WHERE PRODUCT_DEL_FL = 'N'
		<if test='query != null and query != ""'>
			<choose>
				<when test='key=="pName"'>
					AND PRODUCT_NAME LIKE '%${query}%'
				</when>
				<when test='key=="pCode"'>
					AND PRODUCT_NO LIKE '%${query}%'
				</when>
			</choose>
		</if>
	</select>
	
	<!-- 검색한 팜팜상품 리스트 조회 -->
	<select id="selectProductList_search" resultMap="product_rm">
		SELECT P.PRODUCT_NO, P.PRODUCT_NAME, PRODUCT_IMG_ADDRESS,
			STOCK, SOLDOUT_FL,
			TO_CHAR(REG_DATE, 'YYYY-MM-DD') REG_DATE,
			NVL((SELECT SUM(PRODUCT_AMOUNT) FROM ORDER_PRODUCT OP
			LEFT JOIN "ORDER" O ON O.ORDER_NO = OP.ORDER_NO
			WHERE ORDER_STATUS=0
			AND OP.PRODUCT_NO = P.PRODUCT_NO), 0) ORDER_SUM
		FROM PRODUCT P
		JOIN PRODUCT_IMG PI ON PI.PRODUCT_NO = P.PRODUCT_NO
		WHERE PRODUCT_IMG_ORDER=0
		AND PRODUCT_DEL_FL='N'
		<if test='query != null and query != ""'>
			<choose>
				<when test='key=="pName"'>
					AND P.PRODUCT_NAME LIKE '%${query}%'
				</when>
				<when test='key=="pCode"'>
					AND P.PRODUCT_NO LIKE '%${query}%'
				</when>
			</choose>
		</if>
		ORDER BY PRODUCT_NO DESC
	</select>
	
	
	<!-- 판매자 재고 증가 -->
	<insert id="stockUp">
		INSERT INTO STOCK_HISTORY VALUES
		(SEQ_STOCK_NO.NEXTVAL, #{productAmount}, DEFAULT, #{productNo}, 2)
	</insert>
	
	
	<!-- 판매자 재고 감소 -->
	<insert id="stockDown">
		INSERT INTO STOCK_HISTORY VALUES
		(SEQ_STOCK_NO.NEXTVAL, #{productAmount}, DEFAULT, #{productNo}, 3)
	</insert>
	
	<!-- 판매글 삭제  -->
	<update id="deleteProduct">
		UPDATE PRODUCT SET PRODUCT_DEL_FL='Y' WHERE PRODUCT_NO = #{productNo}
	</update>
	
	<!-- 팜팜 상품 조회 -->
	<select id="selectProductDetail" resultMap="product_rm">
		SELECT PRODUCT_NO, PRODUCT_NAME, 
			TO_CHAR(PRODUCT_PRICE, 'FM999,999,999,999') PRODUCT_PRICE, 
			PRODUCT_MESSAGE, CATEGORY_NO
		FROM PRODUCT
		WHERE PRODUCT_NO = #{productNo}
	</select>
	
	
	<!-- 상품 이미지 목록 조회 -->
 	<select id="selectImgList" resultMap="productImg_rm">
		SELECT * FROM PRODUCT_IMG
		WHERE PRODUCT_NO = #{productNo}
	</select>
	
	<!-- 게시글 수정 -->
	<update id="updateProduct">
		UPDATE PRODUCT SET
		PRODUCT_NAME = #{productName},
		PRODUCT_PRICE = #{productPrice},
		CATEGORY_NO = #{categoryNo},
		PRODUCT_MESSAGE = #{productMessage}
		WHERE PRODUCT_NO = #{productNo}
	</update>
	
	<!-- 이미지 삭제 -->
	<delete id="productImgDelete">
		DELETE FROM PRODUCT_IMG
		${condition}
	</delete>
	
	<!-- 이미지 수정 -->
	<update id="productImgUpdate">
		UPDATE PRODUCT_IMG SET
		PRODUCT_IMG_ADDRESS = #{productImgAddress},
		PRODUCT_IMG_ORIGINAL = #{productImgOriginal}
		WHERE PRODUCT_NO = #{productNo}
		AND PRODUCT_IMG_ORDER = #{productImgOrder}
	</update>
	
	<!-- 이미지 삽입 -->
	<insert id="productImgInsert">
		INSERT INTO PRODUCT_IMG 
		VALUES(SEQ_PRODUCT_IMG_NO.NEXTVAL, #{productImgAddress}, 
		#{productNo}, #{productImgOrder}, #{productImgOriginal})
	</insert>
	
	<!-- 상품 상태 변경 -->
	<update id="soldoutProduct">
		UPDATE "PRODUCT" SET
		<choose>
			<when test='pStatus=="sell"'>
				SOLDOUT_FL = 'N'		
			</when>
			<when test='pStatus=="out"'>
				SOLDOUT_FL = 'Y'				
			</when>
		</choose>
		WHERE PRODUCT_NO = #{productNo}
	</update>
	
	<!-- 주문 수 조회 -->
	<select id="orderListCount" resultType="_int">
		SELECT COUNT(*)
		FROM "ORDER"
	</select>
	
	<!-- 주문 전체목록 조회 -->
	<select id="selectOrderList" resultMap="order_rm">		
		SELECT ORDER_NO, ORDER_STATUS, MEMBER_NO, MEMBER_ID, 
			TO_CHAR(ORDER_DATE, 'YYYY-MM-DD') ORDER_DATE,
			TO_CHAR(ORDER_PRICE, '999,999,999,999') ORDER_PRICE,
			(SELECT COUNT(*) FROM ORDER_PRODUCT OP
			WHERE O.ORDER_NO = OP.ORDER_NO) PRODUCT_COUNT,
			TO_CHAR((SELECT SUM(PRODUCT_PRICE*PRODUCT_AMOUNT)
			FROM ORDER_PRODUCT OP
			JOIN PRODUCT USING(PRODUCT_NO)
			WHERE O.ORDER_NO = OP.ORDER_NO), '999,999,999,999') PRODUCT_SUM
		FROM "ORDER" O
		JOIN MEMBER USING(MEMBER_NO)
		ORDER BY ORDER_NO DESC
	</select>
	
	<!-- 검색 조건 일치 주문 수 조회 -->
	<select id="getOrderListCount_search" resultType="_int">
		SELECT COUNT(*) FROM "ORDER"
		JOIN MEMBER USING(MEMBER_NO)
		<if test='query != null and query != ""'>
			<choose>
				<when test='key=="m"'>
					WHERE MEMBER_ID LIKE '%${query}%'
				</when>
				<when test='key=="o"'>
					WHERE ORDER_NO LIKE '%${query}%'
				</when>
			</choose>
		</if>
	</select>
	
	<!-- 검색한 주문 리스트 조회 -->
	<select id="selectOrderList_search" resultMap="order_rm">
		SELECT ORDER_NO, ORDER_STATUS, MEMBER_NO, MEMBER_ID, 
			TO_CHAR(ORDER_DATE, 'YYYY-MM-DD') ORDER_DATE,
			TO_CHAR(ORDER_PRICE, '999,999,999,999') ORDER_PRICE,
			(SELECT COUNT(*) FROM ORDER_PRODUCT OP
			WHERE O.ORDER_NO = OP.ORDER_NO) PRODUCT_COUNT,
			TO_CHAR((SELECT SUM(PRODUCT_PRICE*PRODUCT_AMOUNT)
			FROM ORDER_PRODUCT OP
			JOIN PRODUCT USING(PRODUCT_NO)
			WHERE O.ORDER_NO = OP.ORDER_NO), '999,999,999,999') PRODUCT_SUM
		FROM "ORDER" O
		JOIN MEMBER USING(MEMBER_NO)
		<if test='query != null and query != ""'>
			<choose>
				<when test='key=="m"'>
					WHERE MEMBER_ID LIKE '%${query}%'
				</when>
				<when test='key=="o"'>
					WHERE ORDER_NO LIKE '%${query}%'
				</when>
			</choose>
		</if>
		ORDER BY ORDER_NO DESC
	</select>
	
	
	<!-- 주문 정보 조회 -->
	<select id="selectOrderDetail" resultMap="order_rm">
		SELECT ORDER_NO, ORDER_STATUS, INVOICE_NO, MEMBER_NAME, MEMBER_TEL,
			ORDER_ADDRESS,TO_CHAR(ORDER_DATE, 'YYYY-MM-DD HH:mm:ss') ORDER_DATE
		FROM "ORDER" O
		LEFT JOIN MEMBER USING(MEMBER_NO)
		LEFT JOIN ORDER_SHIPPING USING(ORDER_NO)
		WHERE ORDER_NO = #{orderNo}
	</select>
	
	<!-- 주문 상품 조회 -->
	<select id="selectOrderProduct" resultMap="product_rm">
		SELECT PRODUCT_PRICE, PRODUCT_AMOUNT, PRODUCT_NAME, PRODUCT_IMG_ADDRESS, PRODUCT_STATUS
		FROM ORDER_PRODUCT
		JOIN PRODUCT USING (PRODUCT_NO)
		JOIN PRODUCT_IMG USING (PRODUCT_NO)
		WHERE ORDER_NO= #{orderNo}
		AND PRODUCT_IMG_ORDER=0
	</select>
	
	<!-- 주문 상태 변경 -->
	<update id="updateOrderStatus">
		UPDATE "ORDER" SET ORDER_STATUS = #{oStatus}
		WHERE ORDER_NO = #{orderNo}
	</update>
	
	<!-- 송장 등록 -->
	<insert id="enrollInvocie">
		INSERT INTO ORDER_SHIPPING VALUES 
		(#{orderNo},#{invoiceNo})
	</insert>
	
	<!-- 주문상태 업데이트 -->
	<update id="updateDeliveryStatus">
		UPDATE "ORDER" SET ORDER_STATUS = 1 
		WHERE ORDER_NO = #{orderNo}
	</update>
	
	<!-- 반품 수 조회 -->
	<select id="returnListCount" resultType="_int">
		SELECT COUNT(*)
		FROM RETURN
	</select>
	
	<!-- 반품 목록 조회 -->
	<select id="selectReturnList" resultMap="return_rm">
		SELECT RETURN_NO, ORDER_NO, RETURN_STATUS, RETURN_REASON,
			(SELECT COUNT(*) FROM RETURN_PRODUCT
			WHERE RETURN_NO = R.RETURN_NO) RETURN_AMOUNT,
			MEMBER_ID,
			(SELECT SUM(PRODUCT_PRICE*PRODUCT_AMOUNT)
			FROM RETURN_PRODUCT
			JOIN PRODUCT USING(PRODUCT_NO)
			WHERE RETURN_NO = R.RETURN_NO
			GROUP BY RETURN_NO) RETURN_SUM
		FROM RETURN R
		JOIN "ORDER" USING (ORDER_NO)
		JOIN MEMBER USING(MEMBER_NO)
	</select>
	
	<!-- 반품 상세 조회 -->
	<select id="selectReturnDetail" resultMap="return_rm">
		SELECT RETURN_NO, ORDER_NO, RETURN_STATUS,RETURN_REASON, PRODUCT_NO,
			PRODUCT_NAME, PRODUCT_AMOUNT, PRODUCT_PRICE, ACCOUNT_NAME, ACCOUNT_NO
		FROM RETURN
		RIGHT JOIN RETURN_PRODUCT USING(RETURN_NO)
		LEFT JOIN PRODUCT USING(PRODUCT_NO)
		WHERE RETURN_NO = #{returnNo}
	</select>
	
	<!-- 반품 상태 변경 -->
	<update id="updateReturnStatus">
		UPDATE RETURN SET RETURN_STATUS = #{rStatus} 
		WHERE RETURN_NO = #{returnNo}
	</update>
	
</mapper>