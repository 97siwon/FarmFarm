<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="productDetailMapper">



<!-- 팜팜 상품 resultMap -->
 <resultMap type="Product" id="product_rm">
        <!-- DB에서 PK에 해당하는 필드, 컬럼을 작성하는 태그 -->
     <id property = "productNo" column="PRODUCT_NO"/>
     <!-- 나머지 일반 컬럼 -->
      <result property="productName" column="PRODUCT_NAME" />
      <result property="regDate" column="REG_DATE" />
      <result property="productPrice" column="PRODUCT_PRICE" />
      <result property="stock" column="STOCK" />
      <result property="productMessage" column="PRODUCT_MESSAGE" />
      <result property="categoryName" column="CATEGORY_NAME" />
      <result property="wishCheck" column="WISH_CHECK" />
      <result property="soldoutFl" column="SOLDOUT_FL" />
      
      <collection property="imgList" 
      			  javaType="java.util.ArrayList" ofType="ProductImg"
      			  select="selectImgList"
      			  column = "PRODUCT_NO"/>
      			  
      <collection property="reviewImgAll" 
      			  javaType="java.util.ArrayList" ofType="ReviewImg"
      			  select="selectReviewImgAll"
      			  column = "PRODUCT_NO"/>  			  
  </resultMap>
  
  
  
 <!-- 팜팜 상품 이미지 resultMap --> 
 <resultMap type="ProductImg" id="productImg_rm">
        <!-- DB에서 PK에 해당하는 필드, 컬럼을 작성하는 태그 -->
     <id property = "productImgNo" column="PRODUCT_IMG_NO"/>

     <!-- 나머지 일반 컬럼 -->
      <result property="productImgAddress" column="PRODUCT_IMG_ADDRESS" />
      <result property="productNo" column="PRODUCT_NO" />
      <result property="productImgOrder" column="PRODUCT_IMG_ORDER" />
  </resultMap>
  
  
  
 <!-- 팜팜 상품 리뷰 resultMap --> 
 <resultMap type="Review" id="review_rm">
        <!-- DB에서 PK에 해당하는 필드, 컬럼을 작성하는 태그 -->
     <id property = "reviewNo" column="REVIEW_NO"/>

     <!-- 나머지 일반 컬럼 -->
      <result property="reviewContent" column="REVIEW_CONTENT" />
      <result property="memberNo" column="MEMBER_NO" />
      <result property="productNo" column="PRODUCT_NO" />
      <result property="likeCheck" column="LIKE_CHECK" />
      <result property="likeCount" column="LIKE_COUNT" />
      
      <result property="memberNickname" column="MEMBER_NICKNAME" />
      <result property="profileImg" column="PROFILE_IMG" />
      <result property="productThumbnail" column="PRODUCT_THUMBNAIL" />
      <result property="productName" column="PRODUCT_NAME" />
      <result property="createDate" column="CREATE_DATE" />
      
      
      <collection property="imgList" 
      			  javaType="java.util.ArrayList" ofType="ReviewImg"
      			  select="selectReviewImgList"
      			  column = "REVIEW_NO"/>
</resultMap>
  
  
  
 <!-- 팜팜 상품 리뷰 이미지 resultMap -->
 <resultMap type="ReviewImg" id="reviewImg_rm">
        <!-- DB에서 PK에 해당하는 필드, 컬럼을 작성하는 태그 -->
     <id property = "reviewImgNo" column="REVIEW_IMG_NO"/>

     <!-- 나머지 일반 컬럼 -->
      <result property="reviewImgPath" column="REVIEW_IMG_PATH" />
      <result property="reviewImgOrder" column="REVIEW_IMG_ORDER" />
      <result property="reviewNo" column="REVIEW_NO" />
  </resultMap>
  
  

<!-- 팜팜 상품 조회 -->
<select id="selectProduct" resultMap="product_rm">
	SELECT PRODUCT_NO, PRODUCT_NAME, REG_DATE, SOLDOUT_FL,
		TO_CHAR(PRODUCT_PRICE, 'FM999,999,999,999') PRODUCT_PRICE, 
		STOCK, 
		PRODUCT_MESSAGE, CATEGORY_NAME, #{memberNo} MEMBER_NO,
		(SELECT COUNT(*) FROM WISH w WHERE MEMBER_NO = #{memberNo} AND w.PRODUCT_NO = p.PRODUCT_NO) WISH_CHECK
	FROM PRODUCT p
	JOIN CATEGORY c USING(CATEGORY_NO)
	WHERE PRODUCT_NO = #{productNo}
</select>


<!-- 상품 이미지 목록 조회 -->
<select id="selectImgList" resultMap="productImg_rm">
	SELECT * FROM PRODUCT_IMG pi2
	WHERE PRODUCT_NO = #{productNo}
</select>


<!-- 리뷰 이미지 전체 목록 조회 -->
<select id="selectReviewImgAll" resultMap="reviewImg_rm">
	SELECT REVIEW_IMG_NO , REVIEW_NO , REVIEW_IMG_PATH 
	FROM REVIEW_IMG ri 
	JOIN REVIEW USING(REVIEW_NO)
	JOIN PRODUCT p USING(PRODUCT_NO)
	WHERE PRODUCT_NO = #{productNo} AND REVIEW_IMG_ORDER = 0
	AND REVIEW_DEL_FL = 'N'
	ORDER BY REVIEW_NO DESC
</select>


<!-- 리뷰 개수 조회 -->
<select id="reviewCount" resultType="_int">
	SELECT COUNT(*) FROM REVIEW r 
	WHERE PRODUCT_NO = #{productNo}
</select>



<!-- 상품 리뷰 목록 조회, 도움돼요 여부 함께 조회(멤버넘버 받아야함) -->
<select id="selectReviewList" resultMap="review_rm">
	SELECT REVIEW_NO, REVIEW_CONTENT, MEMBER_NO , PRODUCT_NO, MEMBER_NICKNAME,
		 PROFILE_IMG, TO_CHAR(CREATE_DATE, 'yyyy.MM.DD') CREATE_DATE,
		(SELECT COUNT(*) FROM REVIEW_LIKE rl WHERE rl.MEMBER_NO = #{memberNo} AND rl.REVIEW_NO = r.REVIEW_NO) LIKE_CHECK,
		(SELECT COUNT(*) FROM REVIEW_LIKE rl2 WHERE rl2.REVIEW_NO = r.REVIEW_NO) LIKE_COUNT
	FROM REVIEW r 
	JOIN "MEMBER" m USING(MEMBER_NO)
	WHERE PRODUCT_NO = #{productNo} AND REVIEW_DEL_FL = 'N'	
	<if test='sortFl.equals("R")'>
	ORDER BY LIKE_COUNT DESC, CREATE_DATE
	</if>
	<if test='sortFl.equals("N")'>
	ORDER BY CREATE_DATE, LIKE_COUNT
	</if>
</select>


<!-- 상품 리뷰 이미지 목록 조회 -->
<select id="selectReviewImgList" resultMap="reviewImg_rm">
	SELECT * FROM REVIEW_IMG ri
	WHERE REVIEW_NO = #{reviewNo}
</select>


<!-- 상품 찜하기 -->
<insert id="addWish">
	INSERT INTO WISH
	VALUES(#{memberNo}, #{productNo}, DEFAULT)
</insert>

<!-- 상품 찜 취소 -->
<insert id="removeWish">
	DELETE FROM WISH
	WHERE MEMBER_NO = #{memberNo} AND PRODUCT_NO = #{productNo}
</insert>

<!-- 리뷰 상세 조회 -->
<select id="selectReview" resultMap="review_rm">
	SELECT REVIEW_NO, REVIEW_CONTENT, MEMBER_NO , r.PRODUCT_NO, MEMBER_NICKNAME, PROFILE_IMG, PRODUCT_NAME,
		TO_CHAR(CREATE_DATE, 'yyyy.MM.DD') CREATE_DATE,
		(SELECT COUNT(*) FROM REVIEW_LIKE rl WHERE rl.MEMBER_NO = #{memberNo} AND rl.REVIEW_NO = r.REVIEW_NO) LIKE_CHECK,
		(SELECT COUNT(*) FROM REVIEW_LIKE rl2 WHERE rl2.REVIEW_NO = r.REVIEW_NO) LIKE_COUNT,
		(SELECT PRODUCT_IMG_ADDRESS FROM PRODUCT_IMG pi2 WHERE pi2.PRODUCT_NO = r.PRODUCT_NO AND PRODUCT_IMG_ORDER = 0) PRODUCT_THUMBNAIL
	FROM REVIEW r 
	JOIN "MEMBER" m USING(MEMBER_NO)
	JOIN PRODUCT p ON (r.PRODUCT_NO = p.PRODUCT_NO)
	WHERE REVIEW_NO = #{reviewNo} AND REVIEW_DEL_FL = 'N'
</select>

<!-- 사진 리뷰 목록 조회 -->
<select id="selectImgReview" resultMap="review_rm">
	SELECT REVIEW_NO
	FROM REVIEW r 
	WHERE r.PRODUCT_NO = #{productNo}
	AND (SELECT COUNT(*) FROM REVIEW_IMG ri WHERE r.REVIEW_NO = ri.REVIEW_NO) > 0
	AND REVIEW_DEL_FL = 'N'
	ORDER BY CREATE_DATE DESC
</select>

<!-- 리뷰 도움돼요 추가 -->
<insert id="addHelp">
	INSERT INTO REVIEW_LIKE
	VALUES(#{reviewNo}, #{memberNo})
</insert>

<!-- 리뷰 도움돼요 취소 -->
<insert id="removeHelp">
	DELETE FROM REVIEW_LIKE
	WHERE MEMBER_NO = #{memberNo} AND REVIEW_NO = #{reviewNo}
</insert>

<update id="updateReview">
	UPDATE REVIEW SET
	REVIEW_CONTENT = #{reviewContent}
	WHERE REVIEW_NO = #{reviewNo}
</update>

<insert id="insertReviewImg">
	INSERT INTO REVIEW_IMG
	VALUES(SEQ_REVIEW_IMG_NO.NEXTVAL, #{reviewNo}, #{reviewImgPath}, #{reviewImgOrder})
</insert>
	
<delete id="deleteReviewImg">
	DELETE FROM REVIEW_IMG
	${condition}
</delete>

<update id="updateReviewImg">
	UPDATE REVIEW_IMG SET
	REVIEW_IMG_PATH = #{reviewImgPath}, REVIEW_IMG_ORDER = #{reviewImgOrder}
	WHERE REVIEW_NO = #{reviewNo} AND REVIEW_IMG_NO = #{reviewImgNo}
</update>

<update id="deleteReview">
	UPDATE REVIEW SET REVIEW_DEL_FL = 'Y' WHERE REVIEW_NO = #{reviewNo} 
</update>

<select id="selectProductImageList" resultType="string">
	SELECT 
		SUBSTR(PRODUCT_IMG_ADDRESS , INSTR(PRODUCT_IMG_ADDRESS, '/', -1)+1, LENGTH(PRODUCT_IMG_ADDRESS)) 
	FROM PRODUCT_IMG pi2  
	WHERE PRODUCT_IMG_ADDRESS IS NOT NULL
</select>
	
</mapper>